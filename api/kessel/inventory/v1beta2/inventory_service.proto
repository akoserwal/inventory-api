syntax = "proto3";

package kessel.inventory.v1beta2;

import "google/api/annotations.proto";
import "kessel/inventory/v1beta2/check_request.proto";
import "kessel/inventory/v1beta2/check_response.proto";
import "kessel/inventory/v1beta2/check_for_update_request.proto";
import "kessel/inventory/v1beta2/check_for_update_response.proto";
import "kessel/inventory/v1beta2/report_resource_request.proto";
import "kessel/inventory/v1beta2/report_resource_response.proto";
import "kessel/inventory/v1beta2/delete_resource_request.proto";
import "kessel/inventory/v1beta2/delete_resource_response.proto";
import "kessel/inventory/v1beta2/streamed_list_objects_request.proto";
import "kessel/inventory/v1beta2/streamed_list_objects_response.proto";

option go_package = "github.com/project-kessel/inventory-api/api/kessel/inventory/v1beta2";
option java_multiple_files = true;
option java_package = "org.project_kessel.api.inventory.v1beta2";

// KesselInventoryService provides APIs to perform relationship checks
// and manage inventory resource lifecycles (reporting and deletion).
service KesselInventoryService {
  // Performs an authorization check to determine whether a subject has a specific
  // permission or relationship on a resource.
  //
  // This API evaluates whether the provided subject is a member of the specified relation
  // (e.g., "viewer", "editor", "admin") on the target object. It answers the question:
  // "Is subject *X* authorized to perform action *Y* on resource *Z*?"
  //
  // Common use cases include enforcing read access, conditional UI visibility,
  // or authorization gating for downstream API calls.
  rpc Check(CheckRequest) returns (CheckResponse) {
    option (google.api.http) = {
      post: "/api/inventory/v1beta2/check"
      body: "*"
    };
  }

  // Performs a strongly consistent authorization check to determine whether a subject
  // is allowed to perform a modifying action on a resource.
  //
  // This API answers the question:
  // "Is subject *X* currently authorized to update or modify resource *Y*?"
  // Unlike the basic `Check` endpoint, this method guarantees a fully up-to-date
  // view of the authorization state (e.g., not relying on cached or eventually consistent data).
  //
  // It is intended to be used just prior to a write operation (e.g., update, delete)
  // to prevent unauthorized modifications due to stale permission models.
  rpc CheckForUpdate(CheckForUpdateRequest) returns (CheckForUpdateResponse) {
    option (google.api.http) = {
      post: "/api/inventory/v1beta2/checkforupdate"
      body: "*"
    };
  }

  // Registers or updates a resource in the Kessel Inventory, along with reporter-specific
  // metadata and representations.
  //
  // In addition to persisting resource data, this API implicitly establishes or updates
  // relationships between the resource and subjects as reported. These relationships
  // serve as the basis for authorization decisions and are evaluated using the `Check`
  // and `CheckForUpdate` APIs.
  //
  // Reporters can contribute their own perspective of the resource via the `representations`
  // field, enabling a multi-reporter model where access control is shaped by aggregated inputs.
  rpc ReportResource(ReportResourceRequest) returns (ReportResourceResponse) {
    option (google.api.http) = {
      post: "/api/inventory/v1beta2/resources"
      body: "*"
    };
  }

  // Deletes a resource from the Kessel Inventory, along with all associated
  // metadata, representations, and authorization relationships.
  //
  // This operation is typically used when a resource has been decommissioned or
  // is no longer reported by any authorized system. Deletion removes not only
  // the resource data, but also any subject-resource relationships that were
  // established via `ReportResource`.
  //
  // As a result, authorization checks performed via the `Check` and
  // `CheckForUpdate` APIs will no longer resolve positively for the deleted
  // resource. Any access control decisions that depend on relationships tied to
  // this resource will be affected.
  //
  // This call is destructive and should be made with care, as it can revoke
  // previously granted access across the system.
  rpc DeleteResource(DeleteResourceRequest) returns (DeleteResourceResponse) {
    option (google.api.http) = {
      delete: "/api/inventory/v1beta2/resources"
      body: "*"
    };
  }

  // Streams a list of resources that the given subject has access to via the specified relation.
  //
  // This authorization query answers the question:
  // "Which resources of type *X* does subject *Y* have the *Z* relation to?"
  //
  // It is often used to power user-facing dashboards, filtered UIs, or policy-driven
  // access lists. The result is streamed incrementally to support large datasets and
  // reduce client-side latency or memory pressure.
  //
  // Pagination and consistency controls allow fine-tuned performance and data freshness.
  // Access decisions are derived from the subject's relationships to inventory resources
  // as reported via `ReportResource`.
  rpc StreamedListObjects(StreamedListObjectsRequest) returns (stream StreamedListObjectsResponse);
}
