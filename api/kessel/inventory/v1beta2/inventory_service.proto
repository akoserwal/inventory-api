syntax = "proto3";

package kessel.inventory.v1beta2;

import "google/api/annotations.proto";
import "kessel/inventory/v1beta2/check_request.proto";
import "kessel/inventory/v1beta2/check_response.proto";
import "kessel/inventory/v1beta2/check_for_update_request.proto";
import "kessel/inventory/v1beta2/check_for_update_response.proto";
import "kessel/inventory/v1beta2/report_resource_request.proto";
import "kessel/inventory/v1beta2/report_resource_response.proto";
import "kessel/inventory/v1beta2/delete_resource_request.proto";
import "kessel/inventory/v1beta2/delete_resource_response.proto";
import "kessel/inventory/v1beta2/streamed_list_objects_request.proto";
import "kessel/inventory/v1beta2/streamed_list_objects_response.proto";

option go_package = "github.com/project-kessel/inventory-api/api/kessel/inventory/v1beta2";
option java_multiple_files = true;
option java_package = "org.project_kessel.api.inventory.v1beta2";

service KesselInventoryService {
  // Checks for the existence of a single Relationship
  // (a Relation between a Resource and a Subject or Subject Set).
  rpc Check(CheckRequest) returns (CheckResponse) {
    option (google.api.http) = {
      post: "/api/inventory/v1beta2/check"
      body: "*"
    };
  }
  // CheckForUpdate performs a fully consistent permission check to determine
  // whether the subject has the necessary permission to update or modify the resource.
  // This is intended for use prior to performing write operations to ensure that
  // the authorization state is up-to-date and not stale.
  rpc CheckForUpdate(CheckForUpdateRequest) returns (CheckForUpdateResponse) {
    option (google.api.http) = {
      post: "/api/inventory/v1beta2/checkforupdate"
      body: "*"
    };
  }
  // Registers or reports a new resource to the inventory.
  rpc ReportResource(ReportResourceRequest) returns (ReportResourceResponse) {
    option (google.api.http) = {
      post: "/api/inventory/v1beta2/resources"
      body: "*"
    };
  }
  // Deletes a resource and its associated relations from the inventory.
  rpc DeleteResource(DeleteResourceRequest) returns (DeleteResourceResponse) {
    option (google.api.http) = {
      delete: "/api/inventory/v1beta2/resources"
      body: "*"
    };
  }
  // Streams a list of objects/resources based on filter parameters.
  rpc StreamedListObjects(StreamedListObjectsRequest) returns (stream StreamedListObjectsResponse);
}
