// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: kessel/inventory/v1beta1/notifications_integrations_service.proto

package v1beta1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNotificationsIntegrationsServiceCreateNotificationsIntegration = "/api.kessel.inventory.v1beta1.NotificationsIntegrationsService/CreateNotificationsIntegration"
const OperationNotificationsIntegrationsServiceDeleteNotificationsIntegration = "/api.kessel.inventory.v1beta1.NotificationsIntegrationsService/DeleteNotificationsIntegration"
const OperationNotificationsIntegrationsServiceUpdateNotificationsIntegration = "/api.kessel.inventory.v1beta1.NotificationsIntegrationsService/UpdateNotificationsIntegration"

type NotificationsIntegrationsServiceHTTPServer interface {
	CreateNotificationsIntegration(context.Context, *CreateNotificationsIntegrationRequest) (*CreateNotificationsIntegrationResponse, error)
	DeleteNotificationsIntegration(context.Context, *DeleteNotificationsIntegrationRequest) (*DeleteNotificationsIntegrationResponse, error)
	UpdateNotificationsIntegration(context.Context, *UpdateNotificationsIntegrationRequest) (*UpdateNotificationsIntegrationResponse, error)
}

func RegisterNotificationsIntegrationsServiceHTTPServer(s *http.Server, srv NotificationsIntegrationsServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta1/notificationsintegrations", _NotificationsIntegrationsService_CreateNotificationsIntegration0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1beta1/notificationsintegrations/{resource}", _NotificationsIntegrationsService_UpdateNotificationsIntegration0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta1/notificationsintegrations/{resource}", _NotificationsIntegrationsService_DeleteNotificationsIntegration0_HTTP_Handler(srv))
}

func _NotificationsIntegrationsService_CreateNotificationsIntegration0_HTTP_Handler(srv NotificationsIntegrationsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNotificationsIntegrationRequest
		if err := ctx.Bind(&in.Integration); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationsIntegrationsServiceCreateNotificationsIntegration)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNotificationsIntegration(ctx, req.(*CreateNotificationsIntegrationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNotificationsIntegrationResponse)
		return ctx.Result(200, reply)
	}
}

func _NotificationsIntegrationsService_UpdateNotificationsIntegration0_HTTP_Handler(srv NotificationsIntegrationsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNotificationsIntegrationRequest
		if err := ctx.Bind(&in.Integration); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationsIntegrationsServiceUpdateNotificationsIntegration)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNotificationsIntegration(ctx, req.(*UpdateNotificationsIntegrationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateNotificationsIntegrationResponse)
		return ctx.Result(200, reply)
	}
}

func _NotificationsIntegrationsService_DeleteNotificationsIntegration0_HTTP_Handler(srv NotificationsIntegrationsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNotificationsIntegrationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNotificationsIntegrationsServiceDeleteNotificationsIntegration)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNotificationsIntegration(ctx, req.(*DeleteNotificationsIntegrationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNotificationsIntegrationResponse)
		return ctx.Result(200, reply)
	}
}

type NotificationsIntegrationsServiceHTTPClient interface {
	CreateNotificationsIntegration(ctx context.Context, req *CreateNotificationsIntegrationRequest, opts ...http.CallOption) (rsp *CreateNotificationsIntegrationResponse, err error)
	DeleteNotificationsIntegration(ctx context.Context, req *DeleteNotificationsIntegrationRequest, opts ...http.CallOption) (rsp *DeleteNotificationsIntegrationResponse, err error)
	UpdateNotificationsIntegration(ctx context.Context, req *UpdateNotificationsIntegrationRequest, opts ...http.CallOption) (rsp *UpdateNotificationsIntegrationResponse, err error)
}

type NotificationsIntegrationsServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewNotificationsIntegrationsServiceHTTPClient(client *http.Client) NotificationsIntegrationsServiceHTTPClient {
	return &NotificationsIntegrationsServiceHTTPClientImpl{client}
}

func (c *NotificationsIntegrationsServiceHTTPClientImpl) CreateNotificationsIntegration(ctx context.Context, in *CreateNotificationsIntegrationRequest, opts ...http.CallOption) (*CreateNotificationsIntegrationResponse, error) {
	var out CreateNotificationsIntegrationResponse
	pattern := "/api/inventory/v1beta1/notificationsintegrations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationsIntegrationsServiceCreateNotificationsIntegration))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Integration, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NotificationsIntegrationsServiceHTTPClientImpl) DeleteNotificationsIntegration(ctx context.Context, in *DeleteNotificationsIntegrationRequest, opts ...http.CallOption) (*DeleteNotificationsIntegrationResponse, error) {
	var out DeleteNotificationsIntegrationResponse
	pattern := "/api/inventory/v1beta1/notificationsintegrations/{resource}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNotificationsIntegrationsServiceDeleteNotificationsIntegration))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NotificationsIntegrationsServiceHTTPClientImpl) UpdateNotificationsIntegration(ctx context.Context, in *UpdateNotificationsIntegrationRequest, opts ...http.CallOption) (*UpdateNotificationsIntegrationResponse, error) {
	var out UpdateNotificationsIntegrationResponse
	pattern := "/api/inventory/v1beta1/notificationsintegrations/{resource}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNotificationsIntegrationsServiceUpdateNotificationsIntegration))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Integration, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
