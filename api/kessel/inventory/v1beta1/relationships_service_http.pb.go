// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: kessel/inventory/v1beta1/relationships_service.proto

package v1beta1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRelationshipsServiceCreatePolicyRelationship = "/api.kessel.inventory.v1beta1.RelationshipsService/CreatePolicyRelationship"
const OperationRelationshipsServiceDeleteResourceRelationshipByURN = "/api.kessel.inventory.v1beta1.RelationshipsService/DeleteResourceRelationshipByURN"
const OperationRelationshipsServiceUpdateResourceRelationshipByURNHs = "/api.kessel.inventory.v1beta1.RelationshipsService/UpdateResourceRelationshipByURNHs"

type RelationshipsServiceHTTPServer interface {
	CreatePolicyRelationship(context.Context, *CreatePolicyRelationshipRequest) (*CreatePolicyRelationshipResponse, error)
	DeleteResourceRelationshipByURN(context.Context, *DeleteResourceRelationshipByURNRequest) (*DeleteResourceRelationshipByURNResponse, error)
	UpdateResourceRelationshipByURNHs(context.Context, *UpdateResourceRelationshipByURNHsRequest) (*UpdateResourceRelationshipByURNResponse, error)
}

func RegisterRelationshipsServiceHTTPServer(s *http.Server, srv RelationshipsServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta1/policy_relationships", _RelationshipsService_CreatePolicyRelationship0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1beta1/policy_relationships", _RelationshipsService_UpdateResourceRelationshipByURNHs0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta1/policy_relationships", _RelationshipsService_DeleteResourceRelationshipByURN0_HTTP_Handler(srv))
}

func _RelationshipsService_CreatePolicyRelationship0_HTTP_Handler(srv RelationshipsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePolicyRelationshipRequest
		if err := ctx.Bind(&in.PolicyRelationship); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationshipsServiceCreatePolicyRelationship)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePolicyRelationship(ctx, req.(*CreatePolicyRelationshipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePolicyRelationshipResponse)
		return ctx.Result(200, reply)
	}
}

func _RelationshipsService_UpdateResourceRelationshipByURNHs0_HTTP_Handler(srv RelationshipsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceRelationshipByURNHsRequest
		if err := ctx.Bind(&in.PolicyRelationship); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationshipsServiceUpdateResourceRelationshipByURNHs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateResourceRelationshipByURNHs(ctx, req.(*UpdateResourceRelationshipByURNHsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResourceRelationshipByURNResponse)
		return ctx.Result(200, reply)
	}
}

func _RelationshipsService_DeleteResourceRelationshipByURN0_HTTP_Handler(srv RelationshipsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRelationshipByURNRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRelationshipsServiceDeleteResourceRelationshipByURN)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResourceRelationshipByURN(ctx, req.(*DeleteResourceRelationshipByURNRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResourceRelationshipByURNResponse)
		return ctx.Result(200, reply)
	}
}

type RelationshipsServiceHTTPClient interface {
	CreatePolicyRelationship(ctx context.Context, req *CreatePolicyRelationshipRequest, opts ...http.CallOption) (rsp *CreatePolicyRelationshipResponse, err error)
	DeleteResourceRelationshipByURN(ctx context.Context, req *DeleteResourceRelationshipByURNRequest, opts ...http.CallOption) (rsp *DeleteResourceRelationshipByURNResponse, err error)
	UpdateResourceRelationshipByURNHs(ctx context.Context, req *UpdateResourceRelationshipByURNHsRequest, opts ...http.CallOption) (rsp *UpdateResourceRelationshipByURNResponse, err error)
}

type RelationshipsServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRelationshipsServiceHTTPClient(client *http.Client) RelationshipsServiceHTTPClient {
	return &RelationshipsServiceHTTPClientImpl{client}
}

func (c *RelationshipsServiceHTTPClientImpl) CreatePolicyRelationship(ctx context.Context, in *CreatePolicyRelationshipRequest, opts ...http.CallOption) (*CreatePolicyRelationshipResponse, error) {
	var out CreatePolicyRelationshipResponse
	pattern := "/api/inventory/v1beta1/policy_relationships"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRelationshipsServiceCreatePolicyRelationship))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.PolicyRelationship, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationshipsServiceHTTPClientImpl) DeleteResourceRelationshipByURN(ctx context.Context, in *DeleteResourceRelationshipByURNRequest, opts ...http.CallOption) (*DeleteResourceRelationshipByURNResponse, error) {
	var out DeleteResourceRelationshipByURNResponse
	pattern := "/api/inventory/v1beta1/policy_relationships"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRelationshipsServiceDeleteResourceRelationshipByURN))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RelationshipsServiceHTTPClientImpl) UpdateResourceRelationshipByURNHs(ctx context.Context, in *UpdateResourceRelationshipByURNHsRequest, opts ...http.CallOption) (*UpdateResourceRelationshipByURNResponse, error) {
	var out UpdateResourceRelationshipByURNResponse
	pattern := "/api/inventory/v1beta1/policy_relationships"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRelationshipsServiceUpdateResourceRelationshipByURNHs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.PolicyRelationship, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
