// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: kessel/inventory/v1beta1/relationships_service.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelationshipsService_CreatePolicyRelationship_FullMethodName          = "/api.kessel.inventory.v1beta1.RelationshipsService/CreatePolicyRelationship"
	RelationshipsService_UpdateResourceRelationshipByURNHs_FullMethodName = "/api.kessel.inventory.v1beta1.RelationshipsService/UpdateResourceRelationshipByURNHs"
	RelationshipsService_DeleteResourceRelationshipByURN_FullMethodName   = "/api.kessel.inventory.v1beta1.RelationshipsService/DeleteResourceRelationshipByURN"
)

// RelationshipsServiceClient is the client API for RelationshipsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationshipsServiceClient interface {
	CreatePolicyRelationship(ctx context.Context, in *CreatePolicyRelationshipRequest, opts ...grpc.CallOption) (*CreatePolicyRelationshipResponse, error)
	UpdateResourceRelationshipByURNHs(ctx context.Context, in *UpdateResourceRelationshipByURNHsRequest, opts ...grpc.CallOption) (*UpdateResourceRelationshipByURNResponse, error)
	DeleteResourceRelationshipByURN(ctx context.Context, in *DeleteResourceRelationshipByURNRequest, opts ...grpc.CallOption) (*DeleteResourceRelationshipByURNResponse, error)
}

type relationshipsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationshipsServiceClient(cc grpc.ClientConnInterface) RelationshipsServiceClient {
	return &relationshipsServiceClient{cc}
}

func (c *relationshipsServiceClient) CreatePolicyRelationship(ctx context.Context, in *CreatePolicyRelationshipRequest, opts ...grpc.CallOption) (*CreatePolicyRelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePolicyRelationshipResponse)
	err := c.cc.Invoke(ctx, RelationshipsService_CreatePolicyRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipsServiceClient) UpdateResourceRelationshipByURNHs(ctx context.Context, in *UpdateResourceRelationshipByURNHsRequest, opts ...grpc.CallOption) (*UpdateResourceRelationshipByURNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResourceRelationshipByURNResponse)
	err := c.cc.Invoke(ctx, RelationshipsService_UpdateResourceRelationshipByURNHs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipsServiceClient) DeleteResourceRelationshipByURN(ctx context.Context, in *DeleteResourceRelationshipByURNRequest, opts ...grpc.CallOption) (*DeleteResourceRelationshipByURNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourceRelationshipByURNResponse)
	err := c.cc.Invoke(ctx, RelationshipsService_DeleteResourceRelationshipByURN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationshipsServiceServer is the server API for RelationshipsService service.
// All implementations must embed UnimplementedRelationshipsServiceServer
// for forward compatibility.
type RelationshipsServiceServer interface {
	CreatePolicyRelationship(context.Context, *CreatePolicyRelationshipRequest) (*CreatePolicyRelationshipResponse, error)
	UpdateResourceRelationshipByURNHs(context.Context, *UpdateResourceRelationshipByURNHsRequest) (*UpdateResourceRelationshipByURNResponse, error)
	DeleteResourceRelationshipByURN(context.Context, *DeleteResourceRelationshipByURNRequest) (*DeleteResourceRelationshipByURNResponse, error)
	mustEmbedUnimplementedRelationshipsServiceServer()
}

// UnimplementedRelationshipsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelationshipsServiceServer struct{}

func (UnimplementedRelationshipsServiceServer) CreatePolicyRelationship(context.Context, *CreatePolicyRelationshipRequest) (*CreatePolicyRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicyRelationship not implemented")
}
func (UnimplementedRelationshipsServiceServer) UpdateResourceRelationshipByURNHs(context.Context, *UpdateResourceRelationshipByURNHsRequest) (*UpdateResourceRelationshipByURNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceRelationshipByURNHs not implemented")
}
func (UnimplementedRelationshipsServiceServer) DeleteResourceRelationshipByURN(context.Context, *DeleteResourceRelationshipByURNRequest) (*DeleteResourceRelationshipByURNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceRelationshipByURN not implemented")
}
func (UnimplementedRelationshipsServiceServer) mustEmbedUnimplementedRelationshipsServiceServer() {}
func (UnimplementedRelationshipsServiceServer) testEmbeddedByValue()                              {}

// UnsafeRelationshipsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationshipsServiceServer will
// result in compilation errors.
type UnsafeRelationshipsServiceServer interface {
	mustEmbedUnimplementedRelationshipsServiceServer()
}

func RegisterRelationshipsServiceServer(s grpc.ServiceRegistrar, srv RelationshipsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelationshipsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelationshipsService_ServiceDesc, srv)
}

func _RelationshipsService_CreatePolicyRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipsServiceServer).CreatePolicyRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipsService_CreatePolicyRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipsServiceServer).CreatePolicyRelationship(ctx, req.(*CreatePolicyRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipsService_UpdateResourceRelationshipByURNHs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRelationshipByURNHsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipsServiceServer).UpdateResourceRelationshipByURNHs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipsService_UpdateResourceRelationshipByURNHs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipsServiceServer).UpdateResourceRelationshipByURNHs(ctx, req.(*UpdateResourceRelationshipByURNHsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipsService_DeleteResourceRelationshipByURN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRelationshipByURNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipsServiceServer).DeleteResourceRelationshipByURN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipsService_DeleteResourceRelationshipByURN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipsServiceServer).DeleteResourceRelationshipByURN(ctx, req.(*DeleteResourceRelationshipByURNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationshipsService_ServiceDesc is the grpc.ServiceDesc for RelationshipsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationshipsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.kessel.inventory.v1beta1.RelationshipsService",
	HandlerType: (*RelationshipsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicyRelationship",
			Handler:    _RelationshipsService_CreatePolicyRelationship_Handler,
		},
		{
			MethodName: "UpdateResourceRelationshipByURNHs",
			Handler:    _RelationshipsService_UpdateResourceRelationshipByURNHs_Handler,
		},
		{
			MethodName: "DeleteResourceRelationshipByURN",
			Handler:    _RelationshipsService_DeleteResourceRelationshipByURN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kessel/inventory/v1beta1/relationships_service.proto",
}
