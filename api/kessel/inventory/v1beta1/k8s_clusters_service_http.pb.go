// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: kessel/inventory/v1beta1/k8s_clusters_service.proto

package v1beta1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationK8SClustersServiceCreateK8sCluster = "/api.kessel.inventory.v1beta1.K8sClustersService/CreateK8sCluster"
const OperationK8SClustersServiceDeleteK8sCluster = "/api.kessel.inventory.v1beta1.K8sClustersService/DeleteK8sCluster"
const OperationK8SClustersServiceUpdateK8sCluster = "/api.kessel.inventory.v1beta1.K8sClustersService/UpdateK8sCluster"

type K8SClustersServiceHTTPServer interface {
	CreateK8SCluster(context.Context, *CreateK8SClusterRequest) (*CreateK8SClusterResponse, error)
	DeleteK8SCluster(context.Context, *DeleteK8SClusterRequest) (*DeleteK8SClusterResponse, error)
	UpdateK8SCluster(context.Context, *UpdateK8SClusterRequest) (*UpdateK8SClusterResponse, error)
}

func RegisterK8SClustersServiceHTTPServer(s *http.Server, srv K8SClustersServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta1/k8s_clusters", _K8SClustersService_CreateK8SCluster0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1beta1/k8s_clusters/{resource}", _K8SClustersService_UpdateK8SCluster0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta1/k8s_clusters/{resource}", _K8SClustersService_DeleteK8SCluster0_HTTP_Handler(srv))
}

func _K8SClustersService_CreateK8SCluster0_HTTP_Handler(srv K8SClustersServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateK8SClusterRequest
		if err := ctx.Bind(&in.K8SCluster); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationK8SClustersServiceCreateK8sCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateK8SCluster(ctx, req.(*CreateK8SClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateK8SClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _K8SClustersService_UpdateK8SCluster0_HTTP_Handler(srv K8SClustersServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateK8SClusterRequest
		if err := ctx.Bind(&in.K8SCluster); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationK8SClustersServiceUpdateK8sCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateK8SCluster(ctx, req.(*UpdateK8SClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateK8SClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _K8SClustersService_DeleteK8SCluster0_HTTP_Handler(srv K8SClustersServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteK8SClusterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationK8SClustersServiceDeleteK8sCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteK8SCluster(ctx, req.(*DeleteK8SClusterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteK8SClusterResponse)
		return ctx.Result(200, reply)
	}
}

type K8SClustersServiceHTTPClient interface {
	CreateK8SCluster(ctx context.Context, req *CreateK8SClusterRequest, opts ...http.CallOption) (rsp *CreateK8SClusterResponse, err error)
	DeleteK8SCluster(ctx context.Context, req *DeleteK8SClusterRequest, opts ...http.CallOption) (rsp *DeleteK8SClusterResponse, err error)
	UpdateK8SCluster(ctx context.Context, req *UpdateK8SClusterRequest, opts ...http.CallOption) (rsp *UpdateK8SClusterResponse, err error)
}

type K8SClustersServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewK8SClustersServiceHTTPClient(client *http.Client) K8SClustersServiceHTTPClient {
	return &K8SClustersServiceHTTPClientImpl{client}
}

func (c *K8SClustersServiceHTTPClientImpl) CreateK8SCluster(ctx context.Context, in *CreateK8SClusterRequest, opts ...http.CallOption) (*CreateK8SClusterResponse, error) {
	var out CreateK8SClusterResponse
	pattern := "/api/inventory/v1beta1/k8s_clusters"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationK8SClustersServiceCreateK8sCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.K8SCluster, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *K8SClustersServiceHTTPClientImpl) DeleteK8SCluster(ctx context.Context, in *DeleteK8SClusterRequest, opts ...http.CallOption) (*DeleteK8SClusterResponse, error) {
	var out DeleteK8SClusterResponse
	pattern := "/api/inventory/v1beta1/k8s_clusters/{resource}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationK8SClustersServiceDeleteK8sCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *K8SClustersServiceHTTPClientImpl) UpdateK8SCluster(ctx context.Context, in *UpdateK8SClusterRequest, opts ...http.CallOption) (*UpdateK8SClusterResponse, error) {
	var out UpdateK8SClusterResponse
	pattern := "/api/inventory/v1beta1/k8s_clusters/{resource}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationK8SClustersServiceUpdateK8sCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.K8SCluster, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
