// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: kessel/inventory/v1beta1/hosts_service.proto

package v1beta1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHostsServiceCreateRHELHost = "/api.kessel.inventory.v1beta1.HostsService/CreateRHELHost"
const OperationHostsServiceDeleteRHELHost = "/api.kessel.inventory.v1beta1.HostsService/DeleteRHELHost"
const OperationHostsServiceUpdateRHELHost = "/api.kessel.inventory.v1beta1.HostsService/UpdateRHELHost"

type HostsServiceHTTPServer interface {
	CreateRHELHost(context.Context, *CreateRHELHostRequest) (*CreateRHELHostResponse, error)
	DeleteRHELHost(context.Context, *DeleteRHELHostRequest) (*DeleteRHELHostResponse, error)
	UpdateRHELHost(context.Context, *UpdateRHELHostRequest) (*UpdateRHELHostResponse, error)
}

func RegisterHostsServiceHTTPServer(s *http.Server, srv HostsServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta1/hosts", _HostsService_CreateRHELHost0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1beta1/hosts/{resource}", _HostsService_UpdateRHELHost0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta1/hosts/{resource}", _HostsService_DeleteRHELHost0_HTTP_Handler(srv))
}

func _HostsService_CreateRHELHost0_HTTP_Handler(srv HostsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRHELHostRequest
		if err := ctx.Bind(&in.Host); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostsServiceCreateRHELHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRHELHost(ctx, req.(*CreateRHELHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRHELHostResponse)
		return ctx.Result(200, reply)
	}
}

func _HostsService_UpdateRHELHost0_HTTP_Handler(srv HostsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRHELHostRequest
		if err := ctx.Bind(&in.Host); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostsServiceUpdateRHELHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRHELHost(ctx, req.(*UpdateRHELHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRHELHostResponse)
		return ctx.Result(200, reply)
	}
}

func _HostsService_DeleteRHELHost0_HTTP_Handler(srv HostsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRHELHostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostsServiceDeleteRHELHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRHELHost(ctx, req.(*DeleteRHELHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRHELHostResponse)
		return ctx.Result(200, reply)
	}
}

type HostsServiceHTTPClient interface {
	CreateRHELHost(ctx context.Context, req *CreateRHELHostRequest, opts ...http.CallOption) (rsp *CreateRHELHostResponse, err error)
	DeleteRHELHost(ctx context.Context, req *DeleteRHELHostRequest, opts ...http.CallOption) (rsp *DeleteRHELHostResponse, err error)
	UpdateRHELHost(ctx context.Context, req *UpdateRHELHostRequest, opts ...http.CallOption) (rsp *UpdateRHELHostResponse, err error)
}

type HostsServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewHostsServiceHTTPClient(client *http.Client) HostsServiceHTTPClient {
	return &HostsServiceHTTPClientImpl{client}
}

func (c *HostsServiceHTTPClientImpl) CreateRHELHost(ctx context.Context, in *CreateRHELHostRequest, opts ...http.CallOption) (*CreateRHELHostResponse, error) {
	var out CreateRHELHostResponse
	pattern := "/api/inventory/v1beta1/hosts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHostsServiceCreateRHELHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Host, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostsServiceHTTPClientImpl) DeleteRHELHost(ctx context.Context, in *DeleteRHELHostRequest, opts ...http.CallOption) (*DeleteRHELHostResponse, error) {
	var out DeleteRHELHostResponse
	pattern := "/api/inventory/v1beta1/hosts/{resource}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHostsServiceDeleteRHELHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostsServiceHTTPClientImpl) UpdateRHELHost(ctx context.Context, in *UpdateRHELHostRequest, opts ...http.CallOption) (*UpdateRHELHostResponse, error) {
	var out UpdateRHELHostResponse
	pattern := "/api/inventory/v1beta1/hosts/{resource}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHostsServiceUpdateRHELHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Host, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
